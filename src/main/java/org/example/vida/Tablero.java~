package org.example.vida;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;


/**
 * Clase que representa el tablero del Juego de la Vida de Conway.
 * Permite leer el estado inicial desde un archivo, generarlo aleatoriamente y
 * simular la evolución del tablero a lo largo de los ciclos.
 */


public class Tablero {

    /** Dimensión del tablero (30x30 celdas). */

    private static final int DIMENSION = 30;

    /** Matriz que representa el estado actual del tablero. */
    private int[][] estadoActual;

    /** Matriz que representa el estado siguiente del tablero. */
    private int[][] estadoSiguiente;


    /**
     * Constructor de la clase Tablero.
     * Inicializa las matrices de estado con la dimensión establecida.
     */
    public Tablero(){

        estadoActual = new int[DIMENSION][DIMENSION];
        estadoSiguiente = new int[DIMENSION][DIMENSION];

    }

    /**
     * Lee el estado inicial del tablero desde un archivo llamado 'matriz'.
     * El archivo debe contener 30 líneas con 30 caracteres (0s y 1s).
     * Un '1' representa una célula viva, y un '0' representa una célula muerta.
     * Si ocurre un error en la lectura, se muestra un mensaje en la consola.
     */
    public void leerEstadoActual() {
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/resources/matriz"))) {
            for (int i = 0; i < DIMENSION; i++) {
                String linea = br.readLine();
                for (int j = 0; j < DIMENSION; j++) {
                    estadoActual[i][j] = Character.getNumericValue(linea.charAt(j));
                }
            }
        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e.getMessage());
        }
    }

    /**
     * Genera aleatoriamente el estado inicial del tablero utilizando el método de Montecarlo.
     * Cada celda tiene un 50% de probabilidad de estar viva o muerta.
     */
    public void generarEstadoActualPorMontecarlo() {
        Random random = new Random();
        for (int i = 0; i < DIMENSION; i++) {
            for (int j = 0; j < DIMENSION; j++) {
                estadoActual[i][j] = random.nextDouble() < 0.5 ? 1 : 0;
            }
        }
    }

    /**
     * Calcula el siguiente estado del tablero según las reglas del Juego de la Vida.
     * - Una célula viva sigue viva si tiene 2 o 3 vecinos vivos.
     * - Una célula muerta revive si tiene exactamente 3 vecinos vivos.
     * - En cualquier otro caso, la célula muere o sigue muerta.
     */
    public void transitarAlEstadoSiguiente() {
        for (int i = 0; i < DIMENSION; i++) {
            for (int j = 0; j < DIMENSION; j++) {
                int vecinosVivos = contarVecinosVivos(i, j);

                if (estadoActual[i][j] == 1) {
                    estadoSiguiente[i][j] = (vecinosVivos == 2 || vecinosVivos == 3) ? 1 : 0;
                } else {
                    estadoSiguiente[i][j] = (vecinosVivos == 3) ? 1 : 0;
                }
            }
        }

        // Intercambiar matrices para actualizar el estado
        int[][] temp = estadoActual;
        estadoActual = estadoSiguiente;
        estadoSiguiente = temp;
    }

    /**
     * Cuenta la cantidad de vecinos vivos de una célula dada.
     *
     * @param fila Índice de la fila de la célula.
     * @param columna Índice de la columna de la célula.
     * @return Número de vecinos vivos.
     */
    private int contarVecinosVivos(int fila, int columna) {
        int vivos = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if (i == 0 && j == 0) continue;
                int x = fila + i;
                int y = columna + j;
                if (x >= 0 && x < DIMENSION && y >= 0 && y < DIMENSION) {
                    vivos += estadoActual[x][y];
                }
            }
        }
        return vivos;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (int[] fila : estadoActual) {
            for (int celda : fila) {
                sb.append(celda == 1 ? "X" : " ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }


}

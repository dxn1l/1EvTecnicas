# 1 Prueba de Evaluación Técnicas de Programación

Este repositorio contiene tres programas en **Java con Maven**,cada uno de ellos realiza una tarea diferente:

1. **Aproximación de Pi** utilizando el método de Montecarlo.
2. **Simulación del Juego de la Vida**.
3. **Búsqueda de un camino en un grafo** dirigido.

## Link al repositorio 

[![GitHub](https://img.shields.io/badge/GitHub-Repo-100000?style=for-the-badge&logo=github&logoColor=white)](https://github.com/dxn1l/1EvTecnicas)

## 📂 Estructura del Proyecto

```sh
1EvTecnicas/
│── Docs/                      # Documentación y diagramas UML
│   ├── PDF/                   # Archivos PDF con enunciados y referencias
│   ├── UML/                   # Diagramas UML de cada práctica
│── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── org.example/
│   │   │   │   ├── pi/        # Código de Aproximación de Pi
│   │   │   │   ├── vida/      # Código del Juego de la Vida
│   │   │   │   ├── grafos/    # Código de la Búsqueda en Grafos
│   ├── test/                  # Pruebas unitarias con JUnit 5
│── target/                    # Archivos compilados y documentación generada
│── pom.xml                     # Configuración de Maven
│── README.md                   # Documentación del proyecto

```
## 🚀 Instalación

1. **Clonar el repositorio**: `git clone https://github.com/dxn1l/1EvTecnicas.git`
2. **Instalar Maven**: `sudo apt install maven`
3. **Compilar el proyecto**: `mvn clean package`
4. **Ejecutar el programa**: dirigirse a la clase main y ejecutarla directamente.
5. **Ejecutar las pruebas unitarias**: `mvn test`
6. **Generar la documentación**: `mvn javadoc:javadoc`

## 🛠️ Funcionalidades

1️⃣ Aproximación del Número Pi

* Utiliza el método de Montecarlo para aproximar el valor de Pi.
* Se solicita al usuario el número de puntos a generar.
* Se imprime la aproximación obtenida.

2️⃣ Simulación del Juego de la Vida

* Permite simular la evolución de células en un tablero de 30x30.
* Dos modos de inicialización:
  * Desde un archivo (matriz) que contiene el estado inicial.
  * Generando un estado aleatorio mediante Montecarlo.
* Se muestra la evolución del tablero en varias iteraciones.

3️⃣ Búsqueda de Caminos en Grafos

* Permite la creación y manipulación de un grafo dirigido.
* Implementa un algoritmo de búsqueda en profundidad (DFS) para encontrar caminos entre nodos.
* Se muestra si hay o no un camino entre dos vértices.

## 📜 Licencia